1. Request 객체
DRF에서는 "HTTP 요청을 나타내는 객체" 로서 HttpRequest 객체를 확장한 Request 객체를 사용한다. 
이는 기존의 HttpRequest 객체보다 요청 내용을 유연하게 파싱 할 수 있도록 돕는다. 
Request 객체의 가장 핵심은 바로 request.data 속성이다. 
request.data는 request.POST와 유사하지만, 웹 API로 동작하는 데 있어서는 훨씬 더 유용하다는 특징을 가지고 있다.

-request.POST  # 폼 데이터만 처리할 수 있고, POST 메소드에서만 동작한다.
-request.data  # 임의의 데이터를 처리할 수 있고, POST, PUT, PATCH 메소드에서 동작한다.

2. Response 객체
DRF는 응답을 나타내는 객체로서 Response 객체를 사용한다. 
이는 TemplateResponse 객체의 일종으로, 렌더링 되지 않은 내용을 읽어서 클라이언트가 요청한 콘텐트 타입에 맞는 형식으로 자동 렌더링 해준다.

-return Response(data)  # 클라이언트가 요청한 콘텐트 타입으로 자동 렌더링 해준다.

3. 응답 상태 코드
뷰에서 응답 상태 코드를 숫자로 적는 것은 가독성이 떨어지며, 코딩 실수하더라도 알아차리기 쉽지 않다. 
그래서 DRF는 각 응답 상태 코드에 대한 명시적인 기호들을 제공한다. 예를 들어 HTTP_400_BAD_REQUEST는 응답 상태 코드 400을 나타낸다. 
이것은 숫자로 적는 것보다 훨씬 더 가독성이 높고 코딩에서의 실수를 줄일 수 있게 해준다.

4. REST API 뷰 정의를 위한 DRF의 두 가지 Wrapper
DRF는 간편하게 REST API 뷰를 정의할 수 있도록 다음과 같은 두 가지의 Wrapper를 제공한다.

@api_view 데코레이터 : 함수 기반의 REST API 뷰를 정의할 때 사용
APIView 클래스 : 클래스 기반의 REST API 뷰를 정의할 때 사용 

이러한 Wrapper들은 해당 뷰가 HTTP 요청을 나타내는 객체로서 앞서 소개한 Request 객체를 사용하도록 만들며, 
클라이언트에서 요청한 콘텐트 타입으로 응답을 렌더링 해줄 수 있도록 Response 객체에 특정 context를 가미해주는 역할을 수행한다. 
또한 이렇게 정의된 뷰의 경우 적절치 못한 메소드의 요청에 대해 "405 Method Not Allowed" 응답을 반환하거나 
잘못된 형식의 입력을 가진 request.data에 접근하려 할 때 발생하는 ParseError 예외를 자동으로 처리해주는 등의 
예외 처리도 어느 정도 이미 구현되어 있다는 특징이 있다.
